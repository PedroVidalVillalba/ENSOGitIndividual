git init                # Creamos el repositorio local vacío en la carpeta actual
git add historia.txt    # Añadimos este fichero con el registro de comandos bajo el control de git
git add Procesos/       # Añadimos el directorio Procesos (y todos los documentos que contiene) bajo el control de git 
git status              # Comprobamos el estado de la stagin area
git commit              # Confirmamos los cambios en el repositorio local (escribimos el mensaje de forma interactiva)
git log                 # Comprobamos que el commit se realizó correctamente
git tag -a R1           # Creamos un tag anotado como versión R1 en el commit actual (en el que se encuentra HEAD)
git log                 # Comprobamos que el commit quedó anotado correctamente
git branch Mejoras      # Creamos una rama "Mejoras"
git switch Mejoras      # Nos movemos a la rama "Mejoras"
git status              # Vemos los archivos que quedan por añadir al control de versiones, una vez añadido el pdf con las propuestas de mejora 
git add Procesos/ControlDeCambios/DP_ControldeCambios_Grupo2-v1_1.pdf       # Añadimos el pdf con las propuestas de mejora
git add Procesos/ControlDeCambios/DP_ControldeCambios_Grupo2.docx           # Actualizamos el documento de control de cambios a la versión 2
git add historia.txt    # Actualizamos el documento con la historia de comandos
git status              # Comprobamos que están en la stagin area todos los archivos para el commit
git commit              # Confirmamos los cambios al repositorio local
git switch main         # Nos movemos de vuelta a la rama main
git merge Mejoras       # Fundimos la rama Mejoras en la rama main
git log                 # Comprobamos que el merge se realizó correctamente 
git branch -d Mejoras   # Borramos la rama Mejoras
git branch              # Listamos las ramas para confirmar que la rama Mejoras se eliminó
git rm Procesos/ControlDeCambios/DP_ControldeCambios_Grupo2-v1_1.pdf        # Borramos del control de cambios el pdf con las propuestas de mejora, para que solo quede la versión correcta del documento de gestión de cambios y las plantillas
git add historia.txt    # Actualizamos el documento de historial de comandos
git status              # Verificamos que están los cambios que queremos hacer
git commit              # Confirmamos los cambios en el repositorio local
git tag -a R2           # Etiquetamos la versión actual con el tag R2
git log                 # Comprobamos que el commit actual quedó etiquetado con la versión R2
git add Procesos/ControlDeCambios/DP_ControldeCambios_Grupo2.docx           # Actualizamos el documento de control de cambios a la versión 3 directamente sobre la rama principal
git add historia.txt    # Actualizamos la historia de comandos
git status              # Comprobamos que están los cambios que queremos rastrear
git commit              # Confirmamos los cambios al repositorio local
git reset R2            # Devolvemos la principal al estado anterior, estiquetada como R2
git status              # Comprobamos los cambios que no están rastreados (Vemos que el documento de control de cambios está modificado a la versión 3, pero no rastreado)
git log                 # Comprobamos que el HEAD está efectivamente en la versión etiquetada como R2
git add Procesos/ControlDeCambios/      # Añadimos todos los documentos del directorio Procesos/ControlDeCambios/ para ser incluidos en el siguiente commit, lo que incluye tanto el documento de control de cambios como las plantillas modificadas
git add historia.txt    # Actualizamos la historia de comandos
git status              # Comprobamos que están rastreados los documentos correctos para el commit
git commit              # Confirmamos los cambios para generar la versión 3
git tag -a R3           # Etiquetamos la nueva versión con la etiqueta R3
git log                 # Comprobamos que el commit se realizó correctamente y se añadió el tag correcto
gh repo create          # Crear mediante el CLI de GitHub un repositorio remoto de forma interactiva desde la terminal (el usuario de GitHub ya estaba previamente configurado)
git push --tags         # Subir la rama principal (la actual) y los tags al repositorio de GitHub (al usar el CLI, ya queda configurado y no hay que especificar a dónde hacer el push)
git pull                # Comprobamos si hubo cambios en el repositorio remoto, y los descargamos si así fuese para asegurarnos de que la rama principal está actualizada
git status              # Comprobamos qué documentos no están actualizados (vemos que historia.txt no lo está por los comandos que acabamos de añadir)
git diff historia.txt   # Comprobamos las diferencias de este fichero respecto a la versión en el repositorio
git add historia.txt    # Añadimos los cambios en historia.txt para que se rastreen en el siguiente commit
git status              # Comprobamos que rastreamos todos los cambios que queremos rastrear
git commit              # Confirmamos los cambios en el repositorio local
git log                 # Comprobamos que la rama local está por delante de la remota (origin/main)
git push                # Subimos los cambios al repositorio remoto en GitHub previamente configurado
git log                 # Comprobamos que tanto el local como el remoto están actualizados al último commit



